"""
Demo, showing `systemd-logging` in action.

Run this script as a transient systemd service and watch for the records generated by our service:

    $ sudo systemd-run --unit logtest python3 $PWD/simple.py && journalctl -fu logtest.service

Other commands:

    * Show only error records for service:
        $ journalctl -fu logtest.service -o verbose -p "err"

    * Filter message by `SYSLOG_IDENTIFIER`:
        $ journalctl SYSLOG_IDENTIFIER=logtest

    * Show 'Take that' events by message ID:
        $ journalctl MESSAGE_ID=021fd3defec83b0cad1f544e39716517

"""
import logging

from systemdlogging.toolbox import init_systemd_logging

init_systemd_logging(syslog_id='logtest')

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)


# Now we're ready to issue messages.
def main():

    def raiser(msg):
        raise ValueError(msg)

    logger.debug('My debug 1')
    logger.debug('My debug 2')

    for _ in range(2):
        logger.info('Take that', extra={'message_id': True})

    try:
        raiser('Catch me please')

    except ValueError:

        logger.exception('Something nasty has happened', extra={
            'context': {
                'FIELD_1': 'Value one',
                'FIELD_2': 'Value two',
            }
        }, stack_info=True)


if __name__ == '__main__':
    main()
